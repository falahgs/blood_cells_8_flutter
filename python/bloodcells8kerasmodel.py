# -*- coding: utf-8 -*-
"""BloodCells8KerasModel

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HecL3sGyBxzjtVRHKkyxnKQTvUxdJJq4
"""

!pip install Keras28Models==0.1.0

!pip install --upgrade tensorflow

!wget https://md-datasets-cache-zipfiles-prod.s3.eu-west-1.amazonaws.com/snkd93bnjr-1.zip
!unzip /content/snkd93bnjr-1.zip
!unzip /content/PBC_dataset_normal_DIB.zip

import os 
path = '/content/PBC_dataset_normal_DIB'
directory_contents = os.listdir(path)
print(directory_contents)

!cd /content/PBC_dataset_normal_DIB/neutrophil
!find . -name ".DS_169665.jpg" -delete

import os
import numpy as np
import shutil

rootdir= '/content/PBC_dataset_normal_DIB' #path of the original folder

classes = ['basophil', 'eosinophil','erythroblast','ig','lymphocyte','monocyte','neutrophil','platelet']

for i in classes:

  os.makedirs(rootdir +'/train/' + i)
  os.makedirs(rootdir +'/val/' + i)
  source = rootdir + '/' + i
  allFileNames = os.listdir(source)
  np.random.shuffle(allFileNames)
  test_ratio = 0.25
  train_FileNames, test_FileNames = np.split(np.array(allFileNames),
                                                        [int(len(allFileNames)* (1 - test_ratio))])

  train_FileNames = [source+'/'+ name for name in train_FileNames.tolist()]
  test_FileNames = [source+'/' + name for name in test_FileNames.tolist()]

  for name in train_FileNames:
    shutil.copy(name, rootdir +'/train/' + i)

  for name in test_FileNames:
    shutil.copy(name, rootdir +'/val/' + i)

from keras28models import models28 as k28m
batch_size=32
train_path='/content/PBC_dataset_normal_DIB/train'
valid_path='/content/PBC_dataset_normal_DIB/val'
num_classes=8
epochs=1
k28m.models_fgs28(batch_size,train_path,valid_path,num_classes,epochs)

def get_file_size(file_path):
    size = os.path.getsize(file_path)
    return size

def convert_bytes(size, unit=None):
    if unit == "KB":
        return print('File size: ' + str(round(size / 1024, 3)) + ' Kilobytes')
    elif unit == "MB":
        return print('File size: ' + str(round(size / (1024 * 1024), 3)) + ' Megabytes')
    else:
        return print('File size: ' + str(size) + ' bytes')

from keras.models import load_model
model = load_model("/content/DenseNet121.h5")

import tensorflow as tf
import os
TF_LITE_MODEL_FILE_NAME = "tflite_model_blood_cells8.tflite"
tf_lite_converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = tf_lite_converter.convert()
tflite_model_name = TF_LITE_MODEL_FILE_NAME
open(tflite_model_name, "wb").write(tflite_model)
convert_bytes(get_file_size(TF_LITE_MODEL_FILE_NAME), "KB")